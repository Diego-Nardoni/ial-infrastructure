name: 'IaL Infrastructure Deployment'

on:
  push:
    branches: [ main, master ]
    paths: [ 'phases/**' ]
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to deploy'
        required: true
        type: choice
        options:
          - security
          - networking
          - compute
          - data
          - application
          - observability
          - ai-ml
          - governance
      dry_run:
        description: 'Dry run deployment'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 'Install Dependencies'
        run: |
          pip install boto3 pyyaml
      
      - name: 'Detect Deployment Context'
        id: context
        run: |
          echo "üîç Detecting deployment context..."
          
          # Determine domain to deploy
          if [ "${{ github.event.inputs.domain }}" != "" ]; then
            DOMAIN="${{ github.event.inputs.domain }}"
          else
            # Auto-detect from changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "phases/" | head -1)
            if [[ $CHANGED_FILES == *"10-security"* ]]; then
              DOMAIN="security"
            elif [[ $CHANGED_FILES == *"20-network"* ]]; then
              DOMAIN="networking"
            elif [[ $CHANGED_FILES == *"30-compute"* ]]; then
              DOMAIN="compute"
            elif [[ $CHANGED_FILES == *"40-data"* ]]; then
              DOMAIN="data"
            elif [[ $CHANGED_FILES == *"50-application"* ]]; then
              DOMAIN="application"
            elif [[ $CHANGED_FILES == *"60-observability"* ]]; then
              DOMAIN="observability"
            elif [[ $CHANGED_FILES == *"70-ai-ml"* ]]; then
              DOMAIN="ai-ml"
            elif [[ $CHANGED_FILES == *"90-governance"* ]]; then
              DOMAIN="governance"
            else
              DOMAIN="all"
            fi
          fi
          
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          echo "üéØ Detected domain: $DOMAIN"
      
      - name: 'Validate Templates'
        run: |
          echo "üîç Validating CloudFormation templates..."
          
          DOMAIN="${{ steps.context.outputs.domain }}"
          
          if [ "$DOMAIN" = "all" ]; then
            find phases/ -name "*.yaml" -exec aws cloudformation validate-template --template-body file://{} \;
          else
            find phases/ -path "*$DOMAIN*" -name "*.yaml" -exec aws cloudformation validate-template --template-body file://{} \;
          fi
      
      - name: 'Deploy Infrastructure'
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "üöÄ Deploying infrastructure..."
          
          DOMAIN="${{ steps.context.outputs.domain }}"
          
          # Deploy based on domain
          case $DOMAIN in
            "security")
              echo "üîê Deploying Security Domain..."
              aws cloudformation deploy --template-file phases/10-security/01-kms-security.yaml --stack-name ial-security-kms --capabilities CAPABILITY_IAM
              aws cloudformation deploy --template-file phases/10-security/02-security-services.yaml --stack-name ial-security-services --capabilities CAPABILITY_IAM
              aws cloudformation deploy --template-file phases/10-security/03-secrets-manager.yaml --stack-name ial-security-secrets --capabilities CAPABILITY_IAM
              aws cloudformation deploy --template-file phases/10-security/04-iam-roles.yaml --stack-name ial-security-iam --capabilities CAPABILITY_IAM
              ;;
            "networking")
              echo "üåê Deploying Networking Domain..."
              aws cloudformation deploy --template-file phases/20-network/01-networking.yaml --stack-name ial-networking --capabilities CAPABILITY_IAM
              aws cloudformation deploy --template-file phases/20-network/02-vpc-flow-logs.yaml --stack-name ial-networking-logs --capabilities CAPABILITY_IAM
              ;;
            "compute")
              echo "üíª Deploying Compute Domain..."
              aws cloudformation deploy --template-file phases/30-compute/01-ecr.yaml --stack-name ial-compute-ecr --capabilities CAPABILITY_IAM
              aws cloudformation deploy --template-file phases/30-compute/02-ecs-cluster.yaml --stack-name ial-compute-ecs --capabilities CAPABILITY_IAM
              ;;
            *)
              echo "üöÄ Deploying All Domains..."
              # Deploy in dependency order
              aws cloudformation deploy --template-file phases/00-foundation/07-conversation-memory.yaml --stack-name ial-conversation-memory --capabilities CAPABILITY_IAM
              ;;
          esac
      
      - name: 'Dry Run Report'
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "üîç Dry Run - No resources deployed"
          echo "Domain: ${{ steps.context.outputs.domain }}"
          echo "Templates validated successfully"
      
      - name: 'Post-Deployment Validation'
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "‚úÖ Validating deployment..."
          
          # Wait for stacks to complete
          sleep 30
          
          # Check stack status
          aws cloudformation describe-stacks --query 'Stacks[?contains(StackName, `ial`)].{Name:StackName,Status:StackStatus}' --output table
      
      - name: 'Update Deployment Status'
        run: |
          echo "üìä Deployment completed via GitHub Actions"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Domain: ${{ steps.context.outputs.domain }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run }}"
