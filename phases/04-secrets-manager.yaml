phase_name: "Secrets Manager - Secure Credential Management"
description: "AWS Secrets Manager for RDS passwords and external API keys with automatic rotation"
resource_count: 4

Resources:
  # Aurora PostgreSQL Master Secret
  AuroraSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}-aurora-master-secret'
      Description: 'Aurora PostgreSQL master credentials with automatic rotation'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\\'
        RequireEachIncludedType: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: DatabaseCredentials
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function for Secret Rotation
  SecretRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-aurora-secret-rotation'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt SecretRotationRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import os
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              """Aurora PostgreSQL secret rotation handler"""
              
              service = boto3.client('secretsmanager')
              
              arn = event['Step1']['SecretId']
              token = event['Step1']['ClientRequestToken']
              step = event['Step1']['Step']
              
              logger.info(f"Rotating secret {arn} step {step}")
              
              if step == "createSecret":
                  create_secret(service, arn, token)
              elif step == "setSecret":
                  set_secret(service, arn, token)
              elif step == "testSecret":
                  test_secret(service, arn, token)
              elif step == "finishSecret":
                  finish_secret(service, arn, token)
              else:
                  raise ValueError(f"Invalid step parameter: {step}")
              
              return {"message": f"Secret rotation step {step} completed"}
          
          def create_secret(service, arn, token):
              """Create new secret version"""
              try:
                  service.get_secret_value(SecretId=arn, VersionId=token, VersionStage="AWSPENDING")
                  logger.info("Secret already exists for this rotation")
              except service.exceptions.ResourceNotFoundException:
                  # Generate new password
                  service.update_secret_version_stage(
                      SecretId=arn,
                      VersionStage="AWSPENDING",
                      ClientRequestToken=token
                  )
                  logger.info("Created new secret version")
          
          def set_secret(service, arn, token):
              """Set secret in database"""
              logger.info("Setting secret in database - placeholder")
              # In real implementation, would update database password
              
          def test_secret(service, arn, token):
              """Test new secret"""
              logger.info("Testing new secret - placeholder")
              # In real implementation, would test database connection
              
          def finish_secret(service, arn, token):
              """Finish rotation"""
              service.update_secret_version_stage(
                  SecretId=arn,
                  VersionStage="AWSCURRENT",
                  MoveToVersionId=token,
                  RemoveFromVersionId=service.describe_secret(SecretId=arn)['VersionIdsToStages']
              )
              logger.info("Finished secret rotation")
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for Secret Rotation Lambda
  SecretRotationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-secret-rotation-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                Resource: !Ref AuroraSecret
              - Effect: Allow
                Action:
                  - rds:DescribeDBClusters
                  - rds:DescribeDBInstances
                  - rds:ModifyDBCluster
                  - rds:ModifyDBInstance
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DetachNetworkInterface
                Resource: '*'

  # Automatic Secret Rotation Schedule
  SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref AuroraSecret
      RotationLambdaArn: !GetAtt SecretRotationLambda.Arn
      RotationInterval: 30  # Rotate every 30 days
      RotationImmediate: false

# Outputs for other phases to reference
Outputs:
  AuroraSecretArn:
    Description: 'ARN of the Aurora master secret'
    Value: !Ref AuroraSecret
    Export:
      Name: !Sub '${ProjectName}-aurora-secret-arn'

  AuroraSecretName:
    Description: 'Name of the Aurora master secret'
    Value: !Sub '${ProjectName}-aurora-master-secret'
    Export:
      Name: !Sub '${ProjectName}-aurora-secret-name'

  RotationLambdaArn:
    Description: 'ARN of the secret rotation Lambda'
    Value: !GetAtt SecretRotationLambda.Arn
    Export:
      Name: !Sub '${ProjectName}-rotation-lambda-arn'

# Cost estimation
metadata:
  estimated_monthly_cost: '$0.46'
  cost_breakdown:
    secret_storage: '$0.40'
    api_calls: '$0.01'
    rotation: '$0.05'
  
# Parameters expected from main template
parameters:
  ProjectName:
    Type: String
    Default: ial
  Environment:
    Type: String
    Default: production
