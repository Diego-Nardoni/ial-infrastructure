# PHASE 16 - DRIFT DETECTION
# Continuous drift detection with EventBridge + Lambda

phase: "16-drift-detection"
description: "Continuous drift detection with EventBridge + Lambda + Bedrock classification"
depends_on: ["00-dynamodb-state", "03-networking", "14-observability"]
estimated_cost_monthly: 4  # Lambda + Bedrock
resource_count: 4

# ═══════════════════════════════════════════════════════════════════════════════
# RESOURCES
# ═══════════════════════════════════════════════════════════════════════════════

resources:
  # 1. Lambda IAM Role
  lambda_drift_detector_role:
    name: "{{PROJECT_NAME}}-drift-detector-role"
    resource_name: "16-lambda-drift-role"
    type: "AWS::IAM::Role"
    priority: 1
    
    mcp_workflow:
      generate_code:
        tool: "generate_infrastructure_code"
        parameters:
          resource_type: "AWS::IAM::Role"
          region: "{{AWS_REGION}}"
          properties:
            RoleName: "{{PROJECT_NAME}}-drift-detector-role"
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Principal:
                    Service: "lambda.amazonaws.com"
                  Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
              - PolicyName: "BedrockAccess"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                        - "bedrock:InvokeModel"
                      Resource: 
                        - "arn:aws:bedrock:*::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
                        - "arn:aws:bedrock:*::foundation-model/anthropic.claude-3-haiku-20240307-v1:0"
              
              - PolicyName: "DynamoDBAccess"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                        - "dynamodb:Query"
                        - "dynamodb:UpdateItem"
                        - "dynamodb:GetItem"
                      Resource: "arn:aws:dynamodb:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:table/mcp-provisioning-checklist"
              
              - PolicyName: "SNSAccess"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                        - "sns:Publish"
                      Resource: "arn:aws:sns:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:{{PROJECT_NAME}}-alerts-critical"
              
              - PolicyName: "AWSResourcesReadAccess"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                        - "ec2:DescribeSecurityGroups"
                        - "ec2:DescribeInstances"
                        - "rds:DescribeDBInstances"
                        - "s3:GetBucketEncryption"
                        - "s3:GetPublicAccessBlock"
                      Resource: "*"
              
              - PolicyName: "AutoRemediationAccess"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                        - "ec2:AuthorizeSecurityGroupIngress"
                        - "ec2:RevokeSecurityGroupIngress"
                        - "ec2:AuthorizeSecurityGroupEgress"
                        - "ec2:RevokeSecurityGroupEgress"
                        - "ec2:ModifyInstanceAttribute"
                        - "s3:PutBucketEncryption"
                        - "s3:PutPublicAccessBlock"
                        - "rds:ModifyDBInstance"
                      Resource: "*"
                      Condition:
                        StringEquals:
                          "aws:RequestedRegion": "{{AWS_REGION}}"
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                        - "dynamodb:Query"
                        - "dynamodb:GetItem"
                        - "dynamodb:PutItem"
                        - "dynamodb:UpdateItem"
                      Resource:
                        - "arn:aws:dynamodb:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:table/mcp-provisioning-checklist"
                        - "arn:aws:dynamodb:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:table/mcp-provisioning-checklist/index/*"
              
              - PolicyName: "AWSReadAccess"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                        - "ec2:Describe*"
                        - "ecs:Describe*"
                        - "elasticloadbalancing:Describe*"
                        - "elasticache:Describe*"
                        - "cloudfront:Get*"
                        - "wafv2:Get*"
                      Resource: "*"
              
              - PolicyName: "SNSPublish"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                        - "sns:Publish"
                      Resource: "arn:aws:sns:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:{{PROJECT_NAME}}-alerts-critical"
  
  # 2. Lambda Function
  lambda_drift_detector:
    name: "{{PROJECT_NAME}}-drift-detector"
    resource_name: "16-lambda-drift-detector"
    type: "AWS::Lambda::Function"
    priority: 2
    
    note: |
      Lambda function code is in /home/ial/lambda/drift-detector/
      Deploy using: aws lambda create-function with zip file
    
    mcp_workflow:
      generate_code:
        tool: "generate_infrastructure_code"
        parameters:
          resource_type: "AWS::Lambda::Function"
          region: "{{AWS_REGION}}"
          properties:
            FunctionName: "{{PROJECT_NAME}}-drift-detector"
            Runtime: "python3.11"
            Handler: "index.lambda_handler"
            Role: "arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PROJECT_NAME}}-drift-detector-role"
            Timeout: 300
            MemorySize: 256
            Environment:
              Variables:
                PROJECT_NAME: "{{PROJECT_NAME}}"
                SNS_TOPIC_ARN: "arn:aws:sns:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:{{PROJECT_NAME}}-alerts-critical"
                DYNAMODB_TABLE: "mcp-provisioning-checklist"
            VpcConfig:
              SubnetIds:
                - "[PRIVATE_SUBNET_1A_ID]"
                - "[PRIVATE_SUBNET_1B_ID]"
              SecurityGroupIds:
                - "[SG_LAMBDA_ID]"
            Tags:
              - Key: "Project"
                Value: "{{PROJECT_NAME}}"
              - Key: "ManagedBy"
                Value: "IaL"
    
    deployment_steps: |
      # 1. Package Lambda
      cd /home/ial/lambda/drift-detector
      pip install -r requirements.txt -t .
      zip -r function.zip .
      
      # 2. Create Lambda
      aws lambda create-function \
        --function-name {{PROJECT_NAME}}-drift-detector \
        --runtime python3.11 \
        --role arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PROJECT_NAME}}-drift-detector-role \
        --handler index.lambda_handler \
        --zip-file fileb://function.zip \
        --timeout 300 \
        --memory-size 256 \
        --environment Variables={PROJECT_NAME={{PROJECT_NAME}},SNS_TOPIC_ARN=arn:aws:sns:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:{{PROJECT_NAME}}-alerts-critical,DYNAMODB_TABLE=mcp-provisioning-checklist} \
        --region {{AWS_REGION}}
  
  # 3. EventBridge Rule - Scheduled (Hourly)
  eventbridge_rule_scheduled:
    name: "{{PROJECT_NAME}}-drift-detection-hourly"
    resource_name: "16-eventbridge-scheduled"
    type: "AWS::Events::Rule"
    priority: 3
    
    mcp_workflow:
      generate_code:
        tool: "generate_infrastructure_code"
        parameters:
          resource_type: "AWS::Events::Rule"
          region: "{{AWS_REGION}}"
          properties:
            Name: "{{PROJECT_NAME}}-drift-detection-hourly"
            Description: "Hourly drift detection for IaL infrastructure"
            ScheduleExpression: "rate(1 hour)"
            State: "ENABLED"
            Targets:
              - Arn: "arn:aws:lambda:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:function:{{PROJECT_NAME}}-drift-detector"
                Id: "DriftDetectorTarget"
    
    lambda_permission: |
      aws lambda add-permission \
        --function-name {{PROJECT_NAME}}-drift-detector \
        --statement-id AllowEventBridgeInvoke \
        --action lambda:InvokeFunction \
        --principal events.amazonaws.com \
        --source-arn arn:aws:events:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:rule/{{PROJECT_NAME}}-drift-detection-hourly \
        --region {{AWS_REGION}}
  
  # 4. EventBridge Rule - Event-driven (CloudTrail)
  eventbridge_rule_realtime:
    name: "{{PROJECT_NAME}}-drift-detection-realtime"
    resource_name: "16-eventbridge-realtime"
    type: "AWS::Events::Rule"
    priority: 4
    
    mcp_workflow:
      generate_code:
        tool: "generate_infrastructure_code"
        parameters:
          resource_type: "AWS::Events::Rule"
          region: "{{AWS_REGION}}"
          properties:
            Name: "{{PROJECT_NAME}}-drift-detection-realtime"
            Description: "Real-time drift detection triggered by CloudTrail events"
            EventPattern:
              source:
                - "aws.ec2"
                - "aws.elasticloadbalancing"
                - "aws.ecs"
              detail-type:
                - "AWS API Call via CloudTrail"
              detail:
                eventName:
                  - "AuthorizeSecurityGroupIngress"
                  - "RevokeSecurityGroupIngress"
                  - "ModifySecurityGroupRules"
                  - "DeleteSecurityGroup"
                  - "ModifyTargetGroup"
                  - "DeleteTargetGroup"
                  - "UpdateService"
                  - "DeleteService"
            State: "ENABLED"
            Targets:
              - Arn: "arn:aws:lambda:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:function:{{PROJECT_NAME}}-drift-detector"
                Id: "DriftDetectorRealtimeTarget"
    
    lambda_permission: |
      aws lambda add-permission \
        --function-name {{PROJECT_NAME}}-drift-detector \
        --statement-id AllowEventBridgeRealtimeInvoke \
        --action lambda:InvokeFunction \
        --principal events.amazonaws.com \
        --source-arn arn:aws:events:{{AWS_REGION}}:{{AWS_ACCOUNT_ID}}:rule/{{PROJECT_NAME}}-drift-detection-realtime \
        --region {{AWS_REGION}}

# ═══════════════════════════════════════════════════════════════════════════════
# DRIFT DETECTION WORKFLOW
# ═══════════════════════════════════════════════════════════════════════════════

drift_detection_workflow:
  description: |
    Automated drift detection runs every hour and on CloudTrail events.
    Detects configuration changes made outside of IaL and notifies via email.
  
  step_1_trigger:
    scheduled: "Every 1 hour (EventBridge cron)"
    event_driven: "CloudTrail API calls (real-time)"
  
  step_2_lambda_execution:
    action: "Lambda drift-detector executes"
    workflow:
      - "Query DynamoDB: Get all resources"
      - "For each resource: Compare desired vs current state"
      - "Bedrock classifies severity: CRITICAL|HIGH|MEDIUM|LOW"
      - "Store drift events in DynamoDB"
      - "Notify via SNS email"
  
  step_3_notification:
    email_format: |
      Subject: 🚨 Drift Detected: X CRITICAL, Y HIGH
      
      Body:
      Infrastructure Drift Detection Report
      =====================================
      
      Total Drifts: Z
      - CRITICAL: X
      - HIGH: Y
      - MEDIUM: W
      - LOW: V
      
      CRITICAL DRIFTS:
      - Security Group sg-abc123: SSH (22) aberto para 0.0.0.0/0
        Detectado: 2025-10-23 14:30
        Ação recomendada: aws ec2 revoke-security-group-ingress ...
      
      Detected at: 2025-10-23T14:30:00Z

# ═══════════════════════════════════════════════════════════════════════════════
# BEDROCK CLASSIFICATION
# ═══════════════════════════════════════════════════════════════════════════════

bedrock_classification:
  description: "Bedrock classifies drift severity based on security impact"
  
  criteria:
    CRITICAL:
      - "SSH (22) aberto para 0.0.0.0/0"
      - "RDP (3389) aberto para 0.0.0.0/0"
      - "Database port aberto publicamente"
      - "Encryption desabilitada"
      - "Logging desabilitado"
      - "Public access habilitado"
    
    HIGH:
      - "Security Group rule modificada"
      - "IAM policy alterada"
      - "Health check modificado"
      - "Tag ManagedBy modificada"
      - "Backup desabilitado"
    
    MEDIUM:
      - "Timeout alterado"
      - "Scaling limits modificados"
      - "Log retention alterado"
      - "Configuração não-crítica"
    
    LOW:
      - "Tag Name modificada"
      - "Description alterada"
      - "Mudança cosmética"
  
  prompt_template: |
    Classify the severity of this infrastructure drift:
    
    Resource: {{resource_type}}
    Resource Name: {{resource_name}}
    Changes: {{changes}}
    
    Context:
    - Environment: Production
    - Compliance: PCI-DSS, SOC2
    - Criticality: High
    
    Classification criteria:
    - CRITICAL: Immediate security risk
    - HIGH: Compliance violation or significant config change
    - MEDIUM: Non-critical configuration change
    - LOW: Cosmetic change (tags, descriptions)
    
    Respond with ONLY: CRITICAL, HIGH, MEDIUM, or LOW

# ═══════════════════════════════════════════════════════════════════════════════
# VERIFICATION
# ═══════════════════════════════════════════════════════════════════════════════

verification:
  lambda_function:
    command: |
      aws lambda get-function \
        --function-name {{PROJECT_NAME}}-drift-detector \
        --query 'Configuration.{Name:FunctionName,State:State,Runtime:Runtime}' \
        --region {{AWS_REGION}}
  
  eventbridge_scheduled:
    command: |
      aws events describe-rule \
        --name {{PROJECT_NAME}}-drift-detection-hourly \
        --query '{Name:Name,State:State,Schedule:ScheduleExpression}' \
        --region {{AWS_REGION}}
  
  eventbridge_realtime:
    command: |
      aws events describe-rule \
        --name {{PROJECT_NAME}}-drift-detection-realtime \
        --query '{Name:Name,State:State}' \
        --region {{AWS_REGION}}
  
  test_drift_detection:
    description: "Test drift detection by modifying a resource manually"
    steps: |
      # 1. Modify Security Group manually
      aws ec2 authorize-security-group-ingress \
        --group-id {{sg_alb_id}} \
        --protocol tcp \
        --port 22 \
        --cidr 0.0.0.0/0 \
        --region {{AWS_REGION}}
      
      # 2. Wait for EventBridge (real-time) or 1 hour (scheduled)
      
      # 3. Check email for drift notification
      
      # 4. Verify drift recorded in DynamoDB
      aws dynamodb query \
        --table-name mcp-provisioning-checklist \
        --key-condition-expression "Project = :p" \
        --filter-expression "DriftDetected = :drift" \
        --expression-attribute-values '{":p":{"S":"{{PROJECT_NAME}}"},":drift":{"BOOL":true}}' \
        --region {{AWS_REGION}}

# ═══════════════════════════════════════════════════════════════════════════════
# NOTES
# ═══════════════════════════════════════════════════════════════════════════════

notes:
  - "Lambda code is in /home/ial/lambda/drift-detector/"
  - "Drift detection runs automatically every hour"
  - "Real-time detection triggers on CloudTrail events"
  - "Bedrock classifies severity: CRITICAL|HIGH|MEDIUM|LOW"
  - "Email notifications sent via existing SNS topic"
  - "Drift events stored in DynamoDB for audit"
  - "Cost: ~$4/mês (Lambda $0.50 + Bedrock $3.50)"
