# PHASE 00D - BACKUP & RECOVERY STRATEGY
# Professional backup and recovery for IaL infrastructure

phase: "00d-backup-strategy"
description: "Backup and recovery strategy with PITR and automated testing"
depends_on: ["00-dynamodb-state", "00c-enhanced-observability"]
estimated_cost_monthly: 1.86
resource_count: 6

resources:
  # Enable Point-in-Time Recovery for main DynamoDB table
  DynamoDBBackupPolicy:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBStateTable
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BackupPolicy:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: ial
        - Key: Purpose
          Value: backup-pitr
        - Key: BackupStrategy
          Value: point-in-time-recovery

  # S3 Bucket for configuration backups with versioning
  ConfigurationBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "ial-config-backup-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ConfigBackupLifecycle
            Status: Enabled
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref IaLKMSKey
            BucketKeyEnabled: true
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref BackupLogGroup
      Tags:
        - Key: Project
          Value: ial
        - Key: Purpose
          Value: configuration-backup

  # CloudWatch Log Group for backup operations
  BackupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ial/backup-operations
      RetentionInDays: 30
      KmsKeyId: !Ref IaLKMSKey
      Tags:
        - Key: Project
          Value: ial
        - Key: Purpose
          Value: backup-logging

  # Lambda function for automated backup testing
  BackupTestLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ial-backup-tester
      Runtime: python3.11
      Handler: index.handler
      Timeout: 300
      MemorySize: 256
      Role: !GetAtt BackupTestRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBStateTable
          BACKUP_BUCKET: !Ref ConfigurationBackupBucket
          LOG_GROUP: !Ref BackupLogGroup
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from datetime import datetime, timezone
          
          dynamodb = boto3.client('dynamodb')
          s3 = boto3.client('s3')
          logs = boto3.client('logs')
          cloudwatch = boto3.client('cloudwatch')
          
          def handler(event, context):
              """Test backup and recovery capabilities"""
              
              table_name = os.environ['DYNAMODB_TABLE']
              bucket_name = os.environ['BACKUP_BUCKET']
              log_group = os.environ['LOG_GROUP']
              
              results = {
                  'timestamp': datetime.now(timezone.utc).isoformat(),
                  'tests': []
              }
              
              try:
                  # Test 1: Verify PITR is enabled
                  pitr_result = test_pitr_enabled(table_name)
                  results['tests'].append(pitr_result)
                  
                  # Test 2: Test configuration backup
                  backup_result = test_configuration_backup(bucket_name)
                  results['tests'].append(backup_result)
                  
                  # Test 3: Test recovery simulation
                  recovery_result = test_recovery_simulation(table_name)
                  results['tests'].append(recovery_result)
                  
                  # Send metrics to CloudWatch
                  send_backup_metrics(results)
                  
                  # Log results
                  log_results(log_group, results)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(results)
                  }
                  
              except Exception as e:
                  error_result = {
                      'test': 'backup_testing',
                      'status': 'FAILED',
                      'error': str(e),
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
                  results['tests'].append(error_result)
                  
                  return {
                      'statusCode': 500,
                      'body': json.dumps(results)
                  }
          
          def test_pitr_enabled(table_name):
              """Test if Point-in-Time Recovery is enabled"""
              try:
                  response = dynamodb.describe_continuous_backups(TableName=table_name)
                  pitr_enabled = response['ContinuousBackupsDescription']['PointInTimeRecoveryDescription']['PointInTimeRecoveryStatus'] == 'ENABLED'
                  
                  return {
                      'test': 'pitr_enabled',
                      'status': 'PASSED' if pitr_enabled else 'FAILED',
                      'details': f"PITR Status: {response['ContinuousBackupsDescription']['PointInTimeRecoveryDescription']['PointInTimeRecoveryStatus']}",
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
              except Exception as e:
                  return {
                      'test': 'pitr_enabled',
                      'status': 'FAILED',
                      'error': str(e),
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
          
          def test_configuration_backup(bucket_name):
              """Test configuration backup to S3"""
              try:
                  test_key = f"backup-test-{datetime.now().strftime('%Y%m%d-%H%M%S')}.json"
                  test_data = {
                      'test': 'configuration_backup',
                      'timestamp': datetime.now(timezone.utc).isoformat(),
                      'data': 'test backup data'
                  }
                  
                  # Upload test backup
                  s3.put_object(
                      Bucket=bucket_name,
                      Key=test_key,
                      Body=json.dumps(test_data),
                      ContentType='application/json'
                  )
                  
                  # Verify upload
                  response = s3.head_object(Bucket=bucket_name, Key=test_key)
                  
                  # Cleanup test file
                  s3.delete_object(Bucket=bucket_name, Key=test_key)
                  
                  return {
                      'test': 'configuration_backup',
                      'status': 'PASSED',
                      'details': f"Successfully uploaded and verified {test_key}",
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
              except Exception as e:
                  return {
                      'test': 'configuration_backup',
                      'status': 'FAILED',
                      'error': str(e),
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
          
          def test_recovery_simulation(table_name):
              """Simulate recovery process"""
              try:
                  # Get current table description
                  response = dynamodb.describe_table(TableName=table_name)
                  table_status = response['Table']['TableStatus']
                  
                  # Check if table is in good state for recovery
                  if table_status == 'ACTIVE':
                      return {
                          'test': 'recovery_simulation',
                          'status': 'PASSED',
                          'details': f"Table {table_name} is ACTIVE and ready for recovery operations",
                          'timestamp': datetime.now(timezone.utc).isoformat()
                      }
                  else:
                      return {
                          'test': 'recovery_simulation',
                          'status': 'WARNING',
                          'details': f"Table {table_name} status is {table_status}, may affect recovery",
                          'timestamp': datetime.now(timezone.utc).isoformat()
                      }
              except Exception as e:
                  return {
                      'test': 'recovery_simulation',
                      'status': 'FAILED',
                      'error': str(e),
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
          
          def send_backup_metrics(results):
              """Send backup test metrics to CloudWatch"""
              try:
                  passed_tests = len([t for t in results['tests'] if t['status'] == 'PASSED'])
                  failed_tests = len([t for t in results['tests'] if t['status'] == 'FAILED'])
                  total_tests = len(results['tests'])
                  
                  cloudwatch.put_metric_data(
                      Namespace='IaL/Backup',
                      MetricData=[
                          {
                              'MetricName': 'BackupTestsPassed',
                              'Value': passed_tests,
                              'Unit': 'Count',
                              'Dimensions': [{'Name': 'Project', 'Value': 'ial'}]
                          },
                          {
                              'MetricName': 'BackupTestsFailed',
                              'Value': failed_tests,
                              'Unit': 'Count',
                              'Dimensions': [{'Name': 'Project', 'Value': 'ial'}]
                          },
                          {
                              'MetricName': 'BackupTestSuccessRate',
                              'Value': (passed_tests / total_tests * 100) if total_tests > 0 else 0,
                              'Unit': 'Percent',
                              'Dimensions': [{'Name': 'Project', 'Value': 'ial'}]
                          }
                      ]
                  )
              except Exception as e:
                  print(f"Failed to send metrics: {e}")
          
          def log_results(log_group, results):
              """Log backup test results"""
              try:
                  log_stream = f"backup-test-{datetime.now().strftime('%Y/%m/%d')}"
                  
                  # Create log stream if it doesn't exist
                  try:
                      logs.create_log_stream(logGroupName=log_group, logStreamName=log_stream)
                  except logs.exceptions.ResourceAlreadyExistsException:
                      pass
                  
                  # Send log event
                  logs.put_log_events(
                      logGroupName=log_group,
                      logStreamName=log_stream,
                      logEvents=[
                          {
                              'timestamp': int(datetime.now(timezone.utc).timestamp() * 1000),
                              'message': json.dumps(results)
                          }
                      ]
                  )
              except Exception as e:
                  print(f"Failed to log results: {e}")
      Tags:
        - Key: Project
          Value: ial
        - Key: Purpose
          Value: backup-testing

  # IAM Role for Backup Test Lambda
  BackupTestRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ial-backup-test-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BackupTestPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:DescribeContinuousBackups
                  - dynamodb:ListBackups
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/mcp-provisioning-checklist"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:HeadObject
                Resource: !Sub "${ConfigurationBackupBucket}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref ConfigurationBackupBucket
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "${BackupLogGroup}:*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Condition:
                  StringEquals:
                    cloudwatch:namespace: "IaL/Backup"

  # EventBridge Rule for scheduled backup testing
  BackupTestSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: ial-backup-test-schedule
      Description: Schedule backup testing every 24 hours
      ScheduleExpression: "rate(24 hours)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupTestLambda.Arn
          Id: BackupTestTarget
          Input: !Sub |
            {
              "source": "scheduled",
              "detail": {
                "test_type": "automated",
                "timestamp": "${AWS::StackName}"
              }
            }

  # Lambda permission for EventBridge
  BackupTestLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackupTestLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BackupTestSchedule.Arn

# CloudFormation Outputs
Outputs:
  BackupBucketName:
    Description: Name of the configuration backup bucket
    Value: !Ref ConfigurationBackupBucket
    Export:
      Name: !Sub "${AWS::StackName}-BackupBucket"
  
  PITRStatus:
    Description: Point-in-Time Recovery status
    Value: "Enabled for DynamoDB table"
    Export:
      Name: !Sub "${AWS::StackName}-PITRStatus"
  
  BackupTestLambdaArn:
    Description: ARN of the backup test Lambda function
    Value: !GetAtt BackupTestLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BackupTestLambda"
  
  BackupLogGroupName:
    Description: Name of the backup operations log group
    Value: !Ref BackupLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-BackupLogGroup"
